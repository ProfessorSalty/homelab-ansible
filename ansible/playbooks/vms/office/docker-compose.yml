version: "3.7"
networks:
  jupyterhub:
  nextcloud:
  proxy:

volumes:
  nginx_config:
  staticfiles:
  nextcloud:

services:
  ###############################
  #           Nextcloud         #
  ###############################
  nextcloud-server:
    image: nginx:alpine
    restart: unless-stopped
    container_name: nextcloud-server
    networks:
      - nextcloud
    ports:
      - "80:80"
    depends_on:
      - nextcloud-data
    volumes:
      - nextcloud:/var/www/html:ro
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ${NEXTCLOUD_DATA}:/var/www/html/data
      - ${SERVICES_ROOT}/${NEXTCLOUD_ROOT:-nextcloud}/config:/var/www/html/config
      - ${SERVICES_ROOT}/${NEXTCLOUD_ROOT:-nextcloud}/custom_apps:/var/www/html/custom_apps
      - ${SERVICES_ROOT}/${NEXTCLOUD_ROOT:-nextcloud}/themes:/var/www/html/themes
    environment:
      - TZ

  nextcloud-data:
    image: nextcloud:18-fpm-alpine
    restart: unless-stopped
    container_name: nextcloud
    networks:
      - nextcloud
    depends_on:
      - nextcloud-db
      - nextcloud-cache
    volumes:
      - nextcloud:/var/www/html
      - ${NEXTCLOUD_DATA}:/var/www/html/data
      - ${SERVICES_ROOT}/${NEXTCLOUD_ROOT:-nextcloud}/config:/var/www/html/config
      - ${SERVICES_ROOT}/${NEXTCLOUD_ROOT:-nextcloud}/custom_apps:/var/www/html/custom_apps
      - ${SERVICES_ROOT}/${NEXTCLOUD_ROOT:-nextcloud}/themes:/var/www/html/themes
    environment:
      - NEXTCLOUD_ADMIN_USER
      - NEXTCLOUD_ADMIN_PASSWORD
      - POSTGRES_USER=nextcloud
      - POSTGRES_PASSWORD=${NEXTCLOUD_DB_PASSWORD}
      - POSTGRES_HOST=nextcloud-db
      - POSTGRES_DB=nextcloud
      - NEXTCLOUD_HOSTNAME=cloud.${ROOT_DOMAIN}
      - NEXTCLOUD_TRUSTED_DOMAINS=cloud.${ROOT_DOMAIN} ${ROOT_DOMAIN} localhost
      - OVERWRITEPROTOCOL=https
      - REDIS_HOST=nextcloud-cache
      - SMTP_HOST=smtp
      - SMTP_AUTH_TYPE=NONE
      - SMTP_PORT=587
      - MAIL_FROM_ADDRESS=notifications@${ROOT_DOMAIN}
      - TZ

  nextcloud-db:
    image: postgres:12-alpine
    container_name: nextcloud-db
    restart: unless-stopped
    networks:
      - nextcloud
    environment:
      - POSTGRES_DB=nextcloud
      - POSTGRES_USER=nextcloud
      - POSTGRES_PASSWORD=${NEXTCLOUD_DB_PASSWORD}
      - TZ
    volumes:
      - ${SERVICES_ROOT}/${NEXTCLOUD_ROOT:-nextcloud}/db:/var/lib/postgresql/data

  nextcloud-cache:
    image: redis:alpine
    container_name: nextcloud-cache
    restart: unless-stopped
    networks:
      - nextcloud
    environment:
      - TZ

  ###############################
  #           Papermerge        #
  ###############################
  papermerge:
    image: ghcr.io/linuxserver/papermerge
    container_name: papermerge
    environment:
      - PUID
      - PGID
      - TZ
    volumes:
      - ${SERVICES_ROOT}/${PAPERMERGE_ROOT:-papermerge}:/config
      - ${PAPERMERGE_DATA}:/data
    ports:
      - "8000:8000"
    restart: unless-stopped
    
  ###############################
  #           CyberChef         #
  ###############################
  cyberchef:
    image: mpepping/cyberchef
    restart: unless-stopped
    container_name: cyberchef
    environment:
      - PUID
      - PGID
      - TZ
    ports:
      - "8001:8000"

  ###############################
  #     docker-socket-proxy     #
  ###############################
  dockerproxy:
    image: tecnativa/docker-socket-proxy
    container_name: dockerproxy
    restart: unless-stopped
    environment:
      - AGENT_SECRET=${PORTAINER_HOST_SECRET}
      - POST=1
      - BUILD=1
      - CONTAINERS=1
      - EXEC=1
      - IMAGES=1
      - INFO=1
      - NETWORKS=1
      - SESSION=1
      - SWARM=1
      - SYSTEM=1
      - VOLUMES=1
      - TZ
    networks:
      - proxy
    expose:
      - 2375
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"

  ###############################
  #           Tandoor           #
  ###############################

  tandoor-db:
    container_name: tandoor-db
    restart: always
    image: postgres:11-alpine
    volumes:
      - ./postgresql:/var/lib/postgresql/data

  tandoor:
    image: vabene1111/recipes
    container_name: tandoor
    restart: always
    volumes:
      - staticfiles:/opt/recipes/staticfiles
      - nginx_config:/opt/recipes/nginx/conf.d
      - ./mediafiles:/opt/recipes/mediafiles
    depends_on:
      - tandoor_db

  tandoor-web:
    image: nginx:mainline-alpine
    container_name: tandoor-web
    restart: always
    ports:
      - 9999:80
    depends_on:
      - tandoor_web
    volumes:
      - nginx_config:/etc/nginx/conf.d:ro
      - staticfiles:/static
      - ./mediafiles:/media

  ###############################
  #           Jupyter           #
  ###############################
  # pyspark:
  #   image: "jupyter/all-spark-notebook"
  #   environment:
  #     - PUID
  #     - PGID
  #     - TZ
  #   volumes:
  #     - ${SERVICES_ROOT}/${JUPYTER_ROOT:-jupyter}:/home/jovyan
  #   ports:
  #     - "8888:8888"

  hub-db:
    image: postgres:9.5
    container_name: jupyterhub-db
    restart: unless-stopped
    networks:
      - jupyterhub
    environment:
      POSTGRES_DB: jupyterhub
      PGDATA: /data
    env_file:
      - secrets/postgres.env
    volumes:
      - "${SERVICES_ROOT}/${JUPYTER_ROOT:-jupyter}/db:/data"

  hub:
    depends_on:
      - hub-db
    build:
      context: .
      dockerfile: Dockerfile.jupyterhub
      args:
        JUPYTERHUB_VERSION: 0.9.2
    restart: unless-stopped
    command: 
      - jupyterhub -f /srv/jupyterhub/jupyterhub_config.py
      - -H tcp://dockerproxy:2375
    image: jupyterhub
    container_name: jupyterhub
    networks:
      - jupyterhub
    volumes:
      # Bind Docker volume on host for JupyterHub database and cookie secrets
      - "data:/data"
    ports:
      - "8003:80"
    links:
      - hub-db
    environment:
      # All containers will join this network
      DOCKER_NETWORK_NAME: jupyterhub
      # JupyterHub will spawn this Notebook image for users
      DOCKER_NOTEBOOK_IMAGE: jupyter/minimal-notebook:8ccdfc1da8d5
      # Notebook directory inside user image
      DOCKER_NOTEBOOK_DIR: /home/jovyan/work
      # Using this run command (optional)
      DOCKER_SPAWN_CMD: start-singleuser.sh
      # Postgres db info
      POSTGRES_DB: jupyterhub
      POSTGRES_HOST: hub-db
    env_file:
      - secrets/postgres.env
      - secrets/ldap.env

  ###############################
  #      Barcode Buddy          #
  ###############################
  barcode-buddy:
    image: f0rc3/barcodebuddy-docker:latest
    container_name: barcode-buddy
    restart: unless-stopped
    ports:
      - "8086:8086"
    volumes:
      - bbconfig:/config

  ###############################
  #           Grocy             #
  ###############################
  grocy-web:
    image: grocy/nginx:latest
    build:
      args:
        GROCY_VERSION: v3.0.1
        PLATFORM: linux/amd64
      context: .
      dockerfile: Dockerfile-grocy-nginx
    depends_on:
      - grocy
    ports:
      - '8080:8080'
    read_only: true
    tmpfs:
      - /tmp
    volumes:
      - /var/log/nginx
    container_name: grocy-web

  grocy:
    image: grocy/grocy:latest
    build:
      args:
        GROCY_VERSION: v3.0.1
        PLATFORM: linux/amd64
      context: .
      dockerfile: Dockerfile-grocy
    expose:
      - '9000'
    read_only: true
    tmpfs:
      - /tmp
    volumes:
      - /var/log/php7
      - app-db:/var/www/data
    env_file:
      - grocy.env
    container_name: grocy